 			
			PYTHON FULL STACK DEVELOPMENT
									- Shiffana Nazeema A
									         26/10/2022
Technologies: - [Documentation]

1.	HTML      		- https://html.com/ 
2.	CSS			- https://html.com/css/ 
3.	JavaScript		- https://www.javascript.com/ 
4.	Python		 	- https://www.python.org/  -  https://www.techbeamers.com/python-tutorial-step-by-step/#tutorial-list
5.	Flask			- https://flask.palletsprojects.com/en/2.2.x/ 
6.	SQL Alchemy	       	- https://docs.sqlalchemy.org/en/14/
7.	Django			- https://www.djangoproject.com/ - https://docs.djangoproject.com/en/4.1/intro/tutorial01/ 
8.	ReactJS			- https://reactjs.org/ 
9.	React Redux		- https://react-redux.js.org/ 
10.	Open API - Swagger	- https://swagger.io/ 
11.	PostgreSQL		- https://www.postgresql.org/
12.	SQLite			- https://www.sqlite.org/index.html 
13.	MongoDB			- https://www.mongodb.com/
14.	 MySQL			- https://www.mysql.com/
15.	Postman			- https://www.postman.com/ 
16.	Pytest			- https://docs.pytest.org/en/7.1.x/contents.html#
17.	Bootstrap		- https://react-bootstrap.github.io/
18.	Material UI		- https://mui.com/
19.	DS and Algorithm	- https://www.upgrad.com/blog/data-structures-algorithm-in-python/
20.     GitHub			- https://github.com/ 


Integrated Development Environment (IDE) – Visual Studio Code
	Theme: Winter is Coming – Dark Blue – No Italics

GitHub – https://github.com/shiffananazeema/Python_Full_Stack 

-------------------------------------------------------------------

HTML: 
`````
 - Hyper Text Markable Language – Tim Berners-Lee in 1993 at CERN, Switzerland.

  Tags - Enclosed in angle Brackets.  <h1> </h1>
  Attributes - Additional information placed inside. <img src=”mycat.jpg”>


--------------------------------------------------------------------

CSS: 
````

--------------------------------------------------------------------

JavaScript: 

--------------------------------------------------------------------

Python: 
```````
 - Popular Programming Language - Guido van Rossum in 1991 at CWI in the Netherlands


Variable
`````````
 Cotainers for storing data values. 
 Literals - Raw data assigned to a Variable or Constant
	
	- Python is case sensitive. Eg: y and Y are Different

  name  = "Shiffana" 
   |	      |
Variable   Literal


Data Types
``````````
Numeric Types	:	int, float, complex
Text Type	:	str
Boolean Type	:	bool
Sequence Types	:	list, tuple, range
Mapping Type	:	dict
Set Types	: 	set, frozenset
Binary Types	:	bytes, bytearray, memoryview
None Type	:	NoneType

Eg:
```
x = 1					- Integer 
x = 2.8					- Float	  
x = 1j					- Complex 
x = "Hello"				- String  
x = True				- Boolean	
x = ["apple","banana", "cherry"]	- List
x = ("apple", "banana", "cherry")	- Tuple
x = range(6)				- Range
x = {"name" : "John", "age" : 36}	- Dictionary
x = {"apple", "banana", "cherry"}	- Set
x = frozenset({"apple", "banana"})	- Frozenset
x = b"Hello"				- Bytes
x = bytearray(5)			- ByteArray
x = memoryview(bytes(5))		- MemoryView
x = None				- NoneType


Data Type:		Type Casting:	- Changing the type of data
``````````		`````````````
print(type(x))		x = int("3")		


String:
```````
 - Should be in ' '  or " "
 
 Length 	- len(a)
 Check  	- "Worth" in me 	- True
 		- "Quit" not in me 	- True
 Slice  	- a[2:1]/[2:]/[:2]/[-1:]
 Upper  	- a.upper()
 Lower  	- a.lower()
 Remove Space	- a.strip()
 Replace	- a.replace("F","S")
 Split		- a.split(",")
 Capitalize	- a.capitalize()
 Format		- a.format(done) - {}	- Add integer in string 
 Escape String 	- \
 		- \' , \\ , \n, \t 
		
		
Collection Data Types - List , Tuple , Set , Dictionary

Accessing	- txt[1]/txt[2:5]
Checking	- if "apple" in txt:
Changing	- txt[1] = "banana"
Inserting	- txt.insert(3, "orange")	- inserted at the mentiond index
Append		- txt.append("cherry")		- inserted at the end
Extend		- txt.extend(list)		- adding two list
Remove		- txt.remove("banana")		- removing by item
Pop		- txt.pop(1)/()			- removing by index / last item
Deleting	- del txt[1]			- remove by index
		- del txt			- remove the entire list
Clear		- txt.clear()			- empty the list
Sorting		- txt.sort()			- ascending order
		- txt.reverse()			- decending order
		

List:
`````
	- Used to store multiple items in a single variable
	- Ordered , Changable , Allow Duplicate values.
	- Can contain different Data Types

Operators:
``````````
	- used to perform operations on variables and values

 Arithmetic Operator	- Numeric values to perform common Mathematical Operations
 			- + , - , * , / , % , ** , // 
			
 Assignment Operator	- Assign values to Variables 
 			- = , += , -=, *= , /=, %=, **=, //= , &= , |= , ^= , >>= , <<= 
 
 Comparison Operator	- Compare two values
 			- == , != , > , < , >= , <=
			
 Logical Operator	- Combine Conditional Statements
 			- and , or , not 
			
 Identity Operator	- Compare the objects
 			-  is , is not
			
 Membership Operator	- Test is a sequence is present
 			- in , not in
			
 Bitwise Operator	- Compare Binary Numbers
 			- & , | , ^ , ~ , << , >>

Reserved words or Keywords:
```````````````````````````
 - Keywords have special meanings to the compiler. There are 35 keywords.
 
False		await		else		import		pass
None		break	   	except		in		raise
True		class	   	finally		is		return
and 		continue   	for		lambda		try
as 		def 	   	from		nonlocal	while
assert		del   	   	global		not		with
async		elif	   	if		or		yield

Value Keywords		- 	True, False, None
Operator Keywords	- 	and, or, not, in, is
Control Flow Keywords	- 	if, elif, else
Iteration Keywords	- 	for, while, break, continue
Structure Keywords	- 	def, class, with, pass, lambda
Returning Keywords	-	return, yield
Import Keywords		- 	import, from, as
Exception-Handling Keywords -	try, except, raise, finally, assert
Asynchronous Keywords	    - 	async, await
Variable Handling Keywords  - 	del, global, nonlocal

True, False - Boolean value
 Eg:
    x = True			y = False
    x is True			y is not True
    # True			# True
    
None - Represents no Value
 Eg:
    def func():				- can't print the call 
    	print("hello")			- can't print the print
    x = func()
    # hello
    print(x)			
    # None
    
  
--------------------------------------------------------------------

Flask: 

--------------------------------------------------------------------

SQL Alchemy: 

--------------------------------------------------------------------

Django: 
``````
 - Back-End Server side web framework - Adrian and Simon in 2003 at Lawrence Journal-World


 - Check the version of Djagno		- python -m django --version
 - Create a project			- django-admin startproject projectname
 - Run the project in server		- python manage.py runserver 
 - Create a app				- python manage.py startapp appname
 - Make Migrations for database		- python manage.py makemigrations appname
 - Complete the Migration		- python manage.py migrate appname 


 Files inside the Django Project:

 - manage.py		- command-line utility for administrative tasks
 - db.sqlite3		- database file stored in the SQLite 3 format
 - __init__.py		- tells python this directory consider as a Python Package
 - settings.py		- contains all the settings and configuration 
 - urls.py		- mapping between urls and views
 - asgi.py		- entry point for ASGI-compatible web server - Asynchronous Server Gateway interface
 - wsgi.py		- entry point for WSGI-compatible web server - Web Server Gateway Interface


--------------------------------------------------------------------

ReactJS: 
``````
 - JavaScript library for building user interfaces - Jordan Walke in 2013 at Facebook

 - Create a App		- npx create-react-app my-app
 - Run the App		- npm start

 - node_modules		- Where all the packages get installed 
 - index.html - public	- Final file that gets rendered
 - App.css 	    - src	- Style the React App
 - App.js 	    - src	- Container for all component
 - App.test.js   - src	- Mounts a component and make sure it didn't throw during rendering
 - index.css	    - src	- Defines the order of overlapping html elements
 - index.js        - src	- Group all imports to a single 
 - package.json		- Store the list of dependency packages
 - package-lock.json 	- Locks the dependency with the installed version

--------------------------------------------------------------------

React Redux: 

--------------------------------------------------------------------

Open API - Swagger: 

--------------------------------------------------------------------

PostgreSQL: 

--------------------------------------------------------------------

SQLite: 
``````
 - SQL database engine - Richard Hipp in 2000 at United States
 - 

--------------------------------------------------------------------

MongoDB: 

--------------------------------------------------------------------

MySQL: 

--------------------------------------------------------------------

Postman: 

--------------------------------------------------------------------

Pytest: 

--------------------------------------------------------------------

Data Structure and Algorithm:

--------------------------------------------------------------------

GitHub: 
``````
 1.  Initialize the Git 	- git init
 2.  Select the Repository 	- git remote add origin https://github.com/shiffananazeema/Python_Full_Stack.git
 3.  Select the Branch		- git branch -M main   
 4.  Add the Changes		- git add .
 5.  Commit the Changes		- git commit -m "NametheChange"
 6.  Push the Changes		- git push / git push origin main
 7.  Pull the Changes		- git pull   / git pull origin main
 8.  Cloning 			- git clone link
 9.  Merge with branch		- git merge bname
10. Checkout the Changes	- git checkout  / git checkout -b bname
11. Status of the git		- git status
12. History of Changes		- git log 
13. Reset the Changes		- git reset / git reset <commit> / git reset --hard
14. Differcence Changed		- git diff
15. Fetching all the files	- git fetch / git fetch bname / git fetch --all
  -  Exit git log		- q / z


Initialize remote-add branch, 
add commit push pull, 
clone merge, 
checkout status log,
reset differnce fetch

---------------------------------------------------------------------------

	- Take a Deep Breath and Start Again, You Got This. 
	- Tiredness sucks less than regret. You are Stronger than you think. 
	- Focus is more important than Intelligence. I’m a Machine when I do it. 
	- She’s not a girl, She’s a Legend. 
	- You don’t have to play Masculine to be a Strong Women. Faith in MYSELF.
	- Work Hard, Play Harder and Pray Hardest.
	- Code is like Humour. When you have to explain it, it’s Bad.
	- Perfection is achieved not when there is nothing more to Add, but rather 
						when there is nothing more to Take Away.

